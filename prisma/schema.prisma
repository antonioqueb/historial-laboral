generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  companies      Company[]
  profileImageUrl String?  // Nuevo campo para la URL de la foto de perfil
}

model Company {
  id                     String   @id @default(cuid())
  name                   String
  userId                 String
  user                   User     @relation(fields: [userId], references: [id])
  employees              Employee[]
  razonSocial            String   @default("")
  rfc                    String   @unique @default("")
  domicilioFiscalCalle   String   @default("")
  domicilioFiscalNumero  String   @default("")
  domicilioFiscalColonia String   @default("")
  domicilioFiscalMunicipio String @default("")
  domicilioFiscalEstado  String   @default("")
  domicilioFiscalCodigoPostal String @default("")
  nombreComercial        String?  @default("")
  objetoSocial           String   @default("")
  representanteLegalNombre String @default("")
  representanteLegalCurp  String?  @default("")  // No requerido
  capitalSocial          Float?   @default(0.0)  // No requerido
  registrosImss          String?  @default("")   // No requerido
  registrosInfonavit     String?  @default("")   // No requerido
  giroActividadEconomica String?  @default("")   // No requerido
  certificaciones        String[] @default([])   // No requerido
  reviewsGiven           Review[] // Relación con las reviews que esta compañía ha dado
  logoUrl                String?  // Campo para almacenar la URL del logo
  roles                  Role[]   // Relación con Roles
  workShifts             WorkShift[] // Relación con Turno de Trabajo
  departments            Department[] // Relación con Departamentos
  contractTypes          ContractType[] // Relación con Tipo de Contrato
  jobTitles              JobTitle[] // Relación con Título del Trabajo
}

model Employee {
  id                   String   @id @default(cuid())
  name                 String
  role                 String
  department           String
  description          String?
  companyId            String
  company              Company  @relation(fields: [companyId], references: [id])
  socialSecurityNumber String   @unique
  CURP                 String   @unique
  RFC                  String   @unique
  address              String?
  phoneNumber          String?
  email                String   @unique
  birthDate            DateTime
  hireDate             DateTime
  emergencyContact     String?
  emergencyPhone       String?
  bankAccountNumber    String?
  clabeNumber          String?   
  maritalStatus        String
  nationality          String
  educationLevel       String
  gender               String
  bloodType            String
  jobTitle             JobTitle @relation(fields: [jobTitleId], references: [id])
  jobTitleId           String
  workShift            WorkShift @relation(fields: [workShiftId], references: [id])
  workShiftId          String
  contractType         ContractType @relation(fields: [contractTypeId], references: [id])
  contractTypeId       String
  profileImageUrl      String?
  createdAt            DateTime @default(now()) // Registro de creación
  updatedAt            DateTime @updatedAt // Registro de actualización
  reviewsReceived      Review[] // Relación con las reviews que ha recibido este empleado
  uploadedFiles        String[] @default([]) // Añadido: lista de archivos subidos
  latestRating         Int?     // Campo para almacenar la calificación más reciente
  employeeDepartments  EmployeeDepartment[] // Relación con el modelo intermedio EmployeeDepartment
}

model Review {
  id            String    @id @default(cuid())
  employeeId    String
  employee      Employee  @relation(fields: [employeeId], references: [id])
  companyId     String
  company       Company   @relation(fields: [companyId], references: [id])
  title         String
  description   String
  rating        Int       @default(0) // Puedes ajustar el valor por defecto según sea necesario
  positive      Boolean   @default(true)
  documentation String?   // Enlace o ruta a la documentación de respaldo
  createdAt     DateTime  @default(now()) // Registro de creación
  updatedAt     DateTime  @updatedAt // Registro de actualización
}

/// The `Role` model represents different roles within a company.
/// Each role has a unique identifier, a name, and is associated with multiple companies.
/// The model also includes timestamps for when the role was created and last updated.
model Role {
  id        String   @id @default(cuid())
  name      String
  companies Company[] // Role: Define los roles en la empresa
  createdAt DateTime  @default(now()) // Registro de creación
  updatedAt DateTime  @updatedAt // Registro de actualización
}


model WorkShift {
  id         String   @id @default(cuid())
  name       String
  companies  Company[] // WorkShift: Define los turnos de trabajo
  employees  Employee[] // Relación con Employee
  createdAt  DateTime  @default(now()) // Registro de creación
  updatedAt  DateTime  @updatedAt // Registro de actualización
}

model Department {
  id         String   @id @default(cuid())
  name       String
  companies  Company[] // Department: Define los departamentos en la empresa
  employeeDepartments EmployeeDepartment[] // Relación con el modelo intermedio EmployeeDepartment
  createdAt  DateTime  @default(now()) // Registro de creación
  updatedAt  DateTime  @updatedAt // Registro de actualización
}

model ContractType {
  id         String   @id @default(cuid())
  name       String
  companies  Company[] // ContractType: Define los tipos de contrato
  employees  Employee[] // Relación con Employee
  createdAt  DateTime  @default(now()) // Registro de creación
  updatedAt  DateTime  @updatedAt // Registro de actualización
}

model JobTitle {
  id         String   @id @default(cuid())
  name       String
  companies  Company[] // JobTitle: Define los títulos de trabajo
  employees  Employee[] // Relación con Employee
  createdAt  DateTime  @default(now()) // Registro de creación
  updatedAt  DateTime  @updatedAt // Registro de actualización
}

model EmployeeDepartment {
  id           String     @id @default(cuid())
  employeeId   String
  employee     Employee   @relation(fields: [employeeId], references: [id])
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime   @default(now()) // Registro de creación
  updatedAt    DateTime   @updatedAt // Registro de actualización
}
